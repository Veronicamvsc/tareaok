import SwiftUI // üìå Importamos SwiftUI para construir la interfaz gr√°fica.

struct ContentView: View { // üìå `ContentView` es la vista principal donde se muestran las pel√≠culas.
    
    @StateObject var data = FilmListModel() // ‚úÖ `@StateObject` crea una instancia del ViewModel que maneja la lista de pel√≠culas.
    @State private var stringBuscar: String = "" // ‚úÖ Variable de estado para la barra de b√∫squeda.
    
    // ‚úÖ `gridItem` define un layout de 2 columnas para el `LazyVGrid`.
    let gridItem: [GridItem] = Array(repeating: .init(.flexible()), count: 2)

    var body: some View {
        
        // ‚úÖ `filmFilters` almacena la lista de pel√≠culas filtradas seg√∫n el texto ingresado en `stringBuscar`.
        var filmFilters: [Result] {
            if stringBuscar.isEmpty {
                return data.films // üîµ Si no hay b√∫squeda, muestra todas las pel√≠culas.
            } else {
                return data.films.filter { $0.title.lowercased().contains(stringBuscar.lowercased()) } // üîç Filtra por t√≠tulo.
            }
        }
        
        NavigationStack { // ‚úÖ `NavigationStack` permite navegar a detalles de cada pel√≠cula.
            VStack { // ‚úÖ `VStack` organiza los elementos en una columna.
                
                // ‚úÖ T√≠tulo principal.
                Text("üé¨ Movies üé¨")
                    .font(.title)
                    .bold()
                    .padding()
                    .frame(maxWidth: .infinity, alignment: .center)
                    
                // ‚úÖ Barra de b√∫squeda.
                TextField("Buscar pel√≠cula", text: $stringBuscar)
                    .padding()
                    .overlay(
                      RoundedRectangle(cornerRadius: 8)
                        .stroke(Color.gray, lineWidth: 1) // üî≤ Agrega un borde gris alrededor del campo de texto.
                    )
                    .padding()
                
                // ‚úÖ Texto indicando que se muestran las pel√≠culas mejor valoradas.
                Text("Pel√≠culas mejor valoradas")
                    .font(.callout)
                    .bold()
                    .frame(maxWidth: .infinity, alignment: .leading)
                    .padding()
            
                // ‚úÖ `ScrollView` permite desplazarse por la lista de pel√≠culas.
                ScrollView {
                    LazyVGrid(columns: gridItem, spacing: 5) { // ‚úÖ Muestra pel√≠culas en un grid de 2 columnas.
                        ForEach(filmFilters, id:\.id) { film in
                            Item(film: film) // üîµ Muestra cada pel√≠cula con el dise√±o del componente `Item`.
                        }
                    }
                }
            }
            .background(Image("fondo") // ‚úÖ Establece una imagen de fondo.
                .resizable()
                .scaledToFill()
                .ignoresSafeArea()
                .opacity(0.08) // üîµ Da un efecto de transparencia al fondo.
            )
        }
    }
}
struct Item: View {
    let film: Result // ‚úÖ `film` contiene la informaci√≥n de una pel√≠cula.
    
    var body: some View {
        ZStack { // ‚úÖ `ZStack` permite superponer elementos (imagen, t√≠tulo, g√©nero y calificaci√≥n).

            VStack(alignment: .leading) { // ‚úÖ `VStack` organiza los elementos de la pel√≠cula en columna.
                
                // ‚úÖ `NavigationLink` permite navegar a `DetailFilmView` cuando se toca la pel√≠cula.
                NavigationLink(destination: DetailFilmView(film: film)) {
                    AsyncImage(url: URL(string: "https://image.tmdb.org/t/p/original/"+film.poster_path)) { phase in
                        switch phase {
                        case .empty:
                            ProgressView() // üîÑ Muestra un indicador de carga mientras se descarga la imagen.
                                .frame(width: 170)
                        case .success(let image):
                            image
                                .resizable()
                                .scaledToFill()
                                .frame(width: 170)
                                .cornerRadius(10) // üîµ Agrega bordes redondeados.
                        case .failure(_): // ‚ùå Si hay un error cargando la imagen.
                            AsyncImage(url: URL(string: "https://image.tmdb.org/t/p/original/"+film.poster_path)) { phase in
                                switch phase {
                                case .empty:
                                    ProgressView()
                                        .frame(width: 170)
                                case .success(let image):
                                    image
                                        .resizable()
                                        .scaledToFill()
                                        .frame(width: 170)
                                        .cornerRadius(10)
                                case .failure(let failure):
                                    let _ = print(failure.localizedDescription) // üõ† Imprime el error en consola.
                                    Image("filmerror") // üîµ Muestra una imagen de error si falla la carga.
                                        .scaledToFill()
                                        .frame(width: 170)
                                        .cornerRadius(10)
                                @unknown default:
                                    EmptyView()
                                        .frame(width: 170)
                                }
                            }
                        @unknown default:
                            EmptyView()
                                .frame(width: 170)
                        }
                    }
                }
                    
                Text(film.title) // ‚úÖ Muestra el t√≠tulo de la pel√≠cula.
                    .font(.subheadline)
                    
                // ‚úÖ Muestra el g√©nero de la pel√≠cula basado en el primer `genre_id`.
                Text(Genero.generos[Genero.generos.firstIndex(where: { $0.id == film.genre_ids[0] })!].nombre)
                    .font(.caption2)
                    .padding(.all, 5)
                    .background(.gray.opacity(0.2)) // üîµ Agrega un fondo gris al g√©nero.
                    .cornerRadius(10)
            }
            .padding()
                
            // ‚úÖ Muestra un c√≠rculo rojo con la calificaci√≥n en la esquina superior derecha.
            Circle()
                .fill(.redCarpet) // üî¥ Color personalizado.
                .frame(width: 30)
                .position(CGPoint(x: 180, y: 15))
            
            Text("\(String(describing: Double(round(10 * film.vote_average) / 10)))") // ‚úÖ Redondea la calificaci√≥n a 1 decimal.
                .font(.caption)
                .position(CGPoint(x: 180, y: 15))
                .foregroundColor(.white) // üîµ Color blanco para el texto.
        }
    }
}
/*Explicaci√≥n General
 ContentView.swift:

 Muestra una lista de pel√≠culas en una cuadr√≠cula de 2 columnas.
 Incluye una barra de b√∫squeda para filtrar pel√≠culas por t√≠tulo.
 Carga las pel√≠culas desde FilmListModel() (ViewModel).
 Permite navegar a DetailFilmView cuando se selecciona una pel√≠cula.
 Item.swift:

 Muestra cada pel√≠cula con su imagen, t√≠tulo y g√©nero.
 Muestra un indicador de carga (ProgressView) mientras se descarga la imagen.
 Si falla la descarga, muestra una imagen de error.
 Incluye una etiqueta roja con la calificaci√≥n de la pel√≠cula.
 Al tocar la pel√≠cula, se navega a DetailFilmView.
 üìå Ejemplo de Flujo de la App
 1Ô∏è‚É£ El usuario abre la app y se muestra ContentView.swift.
 2Ô∏è‚É£ FilmListModel carga la lista de pel√≠culas desde la API.
 3Ô∏è‚É£ El usuario puede buscar pel√≠culas escribiendo en la barra de b√∫squeda.
 4Ô∏è‚É£ Se muestran las pel√≠culas mejor valoradas en una cuadr√≠cula de 2 columnas.
 5Ô∏è‚É£ Al tocar una pel√≠cula, se abre DetailFilmView.swift con m√°s informaci√≥n.*/
