//
//  FilmListModel.swift
//  tarea2
//
//  Created by Magal√≠ Leiva on 11/2/24.
//

import Foundation // üìå Importamos Foundation para manejar la red y la decodificaci√≥n JSON.

class FilmListModel: ObservableObject { // üìå `FilmListModel` sigue el patr√≥n MVVM y maneja la obtenci√≥n de pel√≠culas desde una API.
    
    @Published var films: [Result] = [] // ‚úÖ `@Published` permite actualizar la vista autom√°ticamente cuando `films` cambia.

    init() { // ‚úÖ `init()` se ejecuta autom√°ticamente cuando se crea una instancia de `FilmListModel`.
        obtenerDatos() // üîµ Llama a `obtenerDatos()` para obtener las pel√≠culas desde la API.
    }

    func obtenerDatos() { // üìå `obtenerDatos()` hace una solicitud HTTP para obtener las pel√≠culas mejor valoradas.
        
        // ‚úÖ Configuraci√≥n de los encabezados HTTP.
        let headers = [
          "accept": "application/json",
          "Authorization": "Bearer " // ‚ùå Falta el Token de autenticaci√≥n aqu√≠.
        ]

        // ‚úÖ Configuraci√≥n de la URL de la API (top-rated movies en espa√±ol, p√°gina 1).
        let request = NSMutableURLRequest(url: NSURL(string: "https://api.themoviedb.org/3/movie/top_rated?language=es-ES&page=1")! as URL,
                                                cachePolicy: .useProtocolCachePolicy,
                                            timeoutInterval: 10.0) // ‚è≥ Define un tiempo de espera de 10 segundos.
        
        request.httpMethod = "GET" // ‚úÖ Especifica que la petici√≥n es de tipo GET.
        request.allHTTPHeaderFields = headers // ‚úÖ Asigna los encabezados a la solicitud.

        // ‚úÖ Inicia una tarea de red para obtener los datos.
        URLSession.shared.dataTask(with: request as URLRequest) { data, response, _ in
            
            guard let data = data else { return } // ‚ùå Si no hay datos, se detiene la ejecuci√≥n.

            do {
                print(String(data: data, encoding: .utf8)!) // üìú Imprime la respuesta JSON en formato texto.

                // ‚úÖ Decodifica los datos JSON en un objeto `Film` usando `JSONDecoder()`.
                let datos = try JSONDecoder().decode(Film.self, from: data)
                
                // ‚úÖ Actualiza `films` en el hilo principal para que la UI se actualice.
                DispatchQueue.main.async {
                    self.films = datos.results
                    print(self.films) // üîµ Imprime la lista de pel√≠culas en consola.
                }
                
            } catch let DecodingError.dataCorrupted(context) {
                print(context) // ‚ùå Muestra un error si el JSON est√° corrupto.
            } catch let DecodingError.keyNotFound(key, context) {
                print("Key '\(key)' not found:", context.debugDescription) // ‚ùå Muestra un error si falta una clave en el JSON.
                print("codingPath:", context.codingPath)
            } catch let DecodingError.valueNotFound(value, context) {
                print("Value '\(value)' not found:", context.debugDescription) // ‚ùå Error si no encuentra un valor esperado.
                print("codingPath:", context.codingPath)
            } catch let DecodingError.typeMismatch(type, context)  {
                print("Type '\(type)' mismatch:", context.debugDescription) // ‚ùå Error si el tipo de dato no coincide con el esperado.
                print("codingPath:", context.codingPath)
            } catch {
                print("error: ", error) // ‚ùå Captura cualquier otro error desconocido.
            }
        }.resume() // ‚úÖ Inicia la tarea de red para obtener los datos de la API.
    }
}
/*Explicaci√≥n General
 Este FilmListModel.swift es un ViewModel en MVVM que maneja la obtenci√≥n de pel√≠culas desde la API de The Movie Database (TMDb).

 @Published var films: [Result] = []

 Guarda la lista de pel√≠culas obtenidas desde la API.
 Cuando se actualiza, SwiftUI actualiza la vista autom√°ticamente.
 Funci√≥n obtenerDatos()

 Hace una petici√≥n HTTP GET a https://api.themoviedb.org/3/movie/top_rated?language=es-ES&page=1.
 Usa URLSession para realizar la solicitud.
 Decodifica el JSON en Film, que contiene una lista de pel√≠culas (results).
 Si hay un error en la decodificaci√≥n, lo imprime en consola.
 Actualizaci√≥n en el hilo principal (DispatchQueue.main.async)

 Como las peticiones de red se ejecutan en segundo plano, los datos deben actualizarse en el hilo principal para que SwiftUI pueda reflejar los cambios en la UI.
 Manejo de errores

 Si el JSON es inv√°lido o los datos son incorrectos, se imprimen errores detallados en consola.
 lujo de la Aplicaci√≥n
 1Ô∏è‚É£ FilmListModel se inicializa en ContentView.swift.
 2Ô∏è‚É£ Se ejecuta obtenerDatos(), que hace la petici√≥n HTTP.
 3Ô∏è‚É£ Si la API responde correctamente, los datos se decodifican en Film.
 4Ô∏è‚É£ films se actualiza en DispatchQueue.main.async para reflejar los datos en la UI.
 5Ô∏è‚É£ SwiftUI actualiza autom√°ticamente ContentView.swift mostrando las pel√≠culas.*/
